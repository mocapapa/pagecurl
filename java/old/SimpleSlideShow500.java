/*     */ import java.applet.Applet;
/*     */ import java.awt.Graphics;
/*     */ import java.awt.Graphics2D;
/*     */ import java.awt.Toolkit;
/*     */ import java.awt.event.KeyEvent;
/*     */ import java.awt.event.KeyListener;
/*     */ import java.awt.event.MouseEvent;
/*     */ import java.awt.event.MouseListener;
/*     */ import java.awt.image.BufferedImage;
/*     */ import java.awt.image.DataBuffer;
/*     */ import java.awt.image.WritableRaster;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.net.URL;
/*     */ import java.util.Date;
/*     */ import javax.imageio.ImageIO;
/*     */ 
/*     */ public class SimpleSlideShow500 extends Applet
/*     */   implements Runnable, MouseListener, KeyListener
/*     */ {
/*     */   public static final double PAI = 3.141592653589793D;
/*     */   public static final double NAN = 0.0D;
/*     */   public static final int W = 500;
/*     */   public static final int H = 333;
/*     */   public static final int WW = 517;
/*     */   public static final int HH = 350;
/*     */   public static final int TW = 500;
/*     */   public static final int TH = 333;
/*     */   public static final int H2 = -167;
/*     */   public static final int URA = 220;
/*  60 */   public double sin = 0.86602540378444D;
/*  61 */   public double cos = 0.5D;
/*  62 */   public double K = 250.0D * this.cos + 166.5D * this.sin;
/*     */   public static final double R = 56.0D;
/*     */   public static final double Q = 59.5D;
/*     */   public static final int N = 4;
/*     */   Thread animator;
/*  71 */   boolean cont = false;
/*  72 */   boolean onshow = false;
/*     */ 
/*  77 */   int m_mode = 0;
/*     */ 
/*  81 */   int c_mode = 1;
/*     */ 
/*  85 */   int seq_mode = 0;
/*     */   int pictureCount;
/*  88 */   int pict_idx = 1;
/*     */ 
/*  90 */   long wait_time = 0L;
/*  91 */   boolean debug = false;
/*     */   URL url;
/*     */   int titleWidth;
/*     */   int titleHeight;
/*     */   int titleOffsetX;
/*     */   int titleOffsetY;
/* 100 */   BufferedImage base = new BufferedImage(517, 350, 1);
/* 101 */   BufferedImage bImg1 = new BufferedImage(517, 350, 1);
/* 102 */   BufferedImage bImg2 = new BufferedImage(517, 350, 1);
/* 103 */   BufferedImage bImg3 = new BufferedImage(500, 333, 1);
/* 104 */   BufferedImage bImg4 = new BufferedImage(517, 350, 1);
/* 105 */   DataBuffer db0 = this.base.getRaster().getDataBuffer();
/* 106 */   DataBuffer db1 = this.bImg1.getRaster().getDataBuffer();
/* 107 */   DataBuffer db2 = this.bImg2.getRaster().getDataBuffer();
/* 108 */   DataBuffer db3 = this.bImg3.getRaster().getDataBuffer();
/* 109 */   Graphics2D gg0 = this.base.createGraphics();
/* 110 */   Graphics2D gg1 = this.bImg1.createGraphics();
/* 111 */   Graphics2D gg2 = this.bImg2.createGraphics();
/* 112 */   Graphics2D gg3 = this.bImg3.createGraphics();
/* 113 */   DLinkList llist = new DLinkList();
/*     */ 
/* 116 */   double[] au2 = { 0.0D, 0.25000083041774D, 0.50000664352064D, 0.75002242288774D, 1.0000531538862D, 1.2501038245664D, 1.5001794265588D, 1.7502849559717D, 2.0004254142924D, 2.2506058092899D, 2.5008311559216D, 2.751106477243D, 3.0014368053222D, 3.251827182158D, 3.5022826606035D, 3.7528083052955D, 4.0034091935891D, 4.2540904164994D, 4.5048570796494D, 4.7557143042264D, 5.0066672279453D, 5.2577210060209D, 5.508880812149D, 5.7601518394969D, 6.0115393017046D, 6.2630484338955D, 6.5146844936993D, 6.7664527622857D, 7.0183585454117D, 7.2704071744803D, 7.5226040076139D, 7.7749544307415D, 8.0274638587005D, 8.280137736354D, 8.532981539724901D, 8.7860007771458D, 9.0392009904274D, 9.2925877560443D, 9.546166686340801D, 9.7999434307554D, 10.053923677067001D, 10.308113152661999D, 10.562517625823D, 10.817142907040999D, 11.071994850354001D, 11.327079354705001D, 11.582402365334D, 11.837969875185999D, 12.093787926358001D, 12.349862611567D, 12.606200075653D, 12.86280651711D, 13.119688189649001D, 13.376851403798D, 13.634302528533D, 13.892047992947999D, 14.150094287956D, 14.408447968040999D, 14.667115653034999D, 14.926104029949D, 15.185419854838999D, 15.445069954724D, 15.70506122954D, 15.965400654153999D, 16.226095280418999D, 16.487152239284001D, 16.748578742959999D, 17.010382087136001D, 17.272569653255001D, 17.535148910854002D, 17.798127419960998D, 18.061512833559D, 18.325312900111999D, 18.589535466169998D, 18.854188479038999D, 19.119279989523999D, 19.384818154756999D, 19.650811241101D, 19.917267627137001D, 20.184195806744D, 20.451604392261D, 20.719502117748998D, 20.987897842353D, 21.256800553757D, 21.526219371756D, 21.796163551926998D, 22.066642489423D, 22.337665722886001D, 22.609242938476999D, 22.881383974041D, 23.154098823409001D, 23.427397640833998D, 23.701290745578D, 23.975788626650001D, 24.250901947702001D, 24.526641552093D, 24.803018468124002D, 25.080043914455999D, 25.357729305715999D, 25.636086258294D, 25.915126596356998D, 26.194862358068001D, 26.475305802034001D, 26.756469413988999D, 27.038365913721002D, 27.321008262256001D, 27.604409669315999D, 27.888583601049D, 28.173543788065D, 28.459304233773D, 28.745879223048998D, 29.033283331235001D, 29.321531433505001D, 29.610638714598D, 29.900620678946002D, 30.191493161217998D, 30.483272337291002D, 30.775974735685001D, 31.069617249471001D, 31.364217148689001D, 31.659792093290999D, 31.956360146653001D, 32.253939789668998D, 32.552549935466999D, 32.852209944789003D, 33.152939642048999D, 33.45475933214D, 33.757689817992997D, 34.061752418971999D, 34.366968990114998D, 34.673361942303004D, 34.980954263384D, 35.289769540328997D, 35.599831982472999D, 35.911166445909998D, 36.223798459104003D, 36.537754249811996D, 36.853060773373997D, 37.169745742479002D, 37.487837658498002D, 37.807365844473999D, 38.128360479885998D, 38.450852637318D, 38.77487432113D, 39.100458508302999D, 39.427639191583999D, 39.756451425096998D, 40.086931372606003D, 40.419116358608001D, 40.753044922459999D, 41.088756875782003D, 41.426293363355001D, 41.765696927805003D, 42.107011578338003D, 42.450282863868999D, 42.795557950861998D, 43.142885706286002D, 43.492316786087002D, 43.843903729634D, 44.197701060645002D, 44.553765395134D, 44.912155557002997D, 45.272932701926003D, 45.636160450292998D, 46.001905030006D, 46.370235430061001D, 46.741223565916002D, 47.114944457760998D, 47.491476422962997D, 47.870901284067997D, 48.253304593930999D, 48.638775879740002D, 49.027408907881998D, 49.419301971903003D, 49.814558206034D, 50.213285927145002D, 50.615599008308997D, 51.021617287654998D, 51.431467016634002D, 51.845281352469001D, 52.263200900219999D, 52.685374310695003D, 53.111958941433002D, 53.543121589051999D, 53.979039302619D, 54.419900289273997D, 54.865904925210998D, 55.317266887393998D, 55.774214424111001D, 56.236991785733998D, 56.705860841111999D, 57.181102909865999D, 57.663020846914002D, 58.151941422985999D, 58.64821805415D, 59.152233944974D, 59.664405724600996D, 60.185187673568997D, 60.715076663072999D, 61.254617959104003D, 61.804412084018999D, 62.365122980895997D, 62.937487796265003D, 63.522328691359D, 64.120567220737001D, 64.733241995003993D, 65.361530593401D, 66.006777046804999D, 66.670526725710005D, 67.354571227598996D, 68.061007005861995D, 68.792313259259004D, 69.551457428576995D, 70.342041290942007D, 71.168508549451005D, 72.036448857810001D, 72.953059422457997D, 73.927877209691005D, 74.974005256517998D, 76.110314231572005D, 77.365776922902995D, 78.789182999686005D, 80.475700369012998D, 82.671121133436998D, 87.964594300513994D };
/* 117 */   double[] au3 = { 175.92918860103001D, 175.67918777061001D, 175.42918195751D, 175.17916617814001D, 174.92913544714D, 174.67908477646D, 174.42900917447D, 174.17890364505999D, 173.92876318674001D, 173.67858279174001D, 173.42835744511001D, 173.17808212379001D, 172.92775179571001D, 172.67736141886999D, 172.42690594042D, 172.17638029573001D, 171.92577940743999D, 171.67509818452999D, 171.42433152138D, 171.17347429680001D, 170.92252137308D, 170.67146759501D, 170.42030778888D, 170.16903676153001D, 169.91764929932D, 169.66614016713001D, 169.41450410733D, 169.16273583873999D, 168.91083005562001D, 168.65878142655001D, 168.40658459341D, 168.15423417029001D, 167.90172474233D, 167.64905086466999D, 167.3962070613D, 167.14318782388D, 166.8899876106D, 166.63660084497999D, 166.38302191469D, 166.12924517027D, 165.87526492396D, 165.62107544836999D, 165.36667097521001D, 165.11204569399001D, 164.85719375067001D, 164.60210924632D, 164.34678623568999D, 164.09121872584001D, 163.83540067467001D, 163.57932598945999D, 163.32298852538D, 163.06638208391999D, 162.80950041137999D, 162.55233719723D, 162.29488607248999D, 162.03714060807999D, 161.77909431307D, 161.52074063299D, 161.26207294798999D, 161.00308457108D, 160.74376874619D, 160.4841186463D, 160.22412737149D, 159.96378794687001D, 159.70309332061001D, 159.44203636174001D, 159.18060985807D, 158.91880651388999D, 158.65661894777D, 158.39403969016999D, 158.13106118107001D, 157.86767576746999D, 157.60387570092001D, 157.33965313485999D, 157.07500012199D, 156.80990861149999D, 156.54437044626999D, 156.27837735993D, 156.01192097389D, 155.74499279427999D, 155.47758420877D, 155.20968648328D, 154.94129075868D, 154.67238804727D, 154.40296922927001D, 154.13302504910001D, 153.86254611160999D, 153.59152287814001D, 153.31994566255D, 153.04780462699D, 152.77508977762D, 152.50179096018999D, 152.22789785545001D, 151.95339997438001D, 151.67828665332999D, 151.40254704893999D, 151.1261701329D, 150.84914468657001D, 150.57145929531001D, 150.29310234273001D, 150.01406200467D, 149.73432624296001D, 149.45388279899001D, 149.17271918704D, 148.89082268730999D, 148.60818033877001D, 148.32477893171D, 148.04060499997999D, 147.75564481296001D, 147.46988436725999D, 147.18330937798001D, 146.89590526979001D, 146.60765716751999D, 146.31854988642999D, 146.02856792207999D, 145.73769543981001D, 145.44591626374D, 145.15321386534001D, 144.85957135155999D, 144.56497145233999D, 144.26939650774D, 143.97282845437999D, 143.67524881136001D, 143.37663866555999D, 143.07697865623999D, 142.77624895898001D, 142.47442926888999D, 142.17149878303999D, 141.86743618206D, 141.56221961091001D, 141.25582665872D, 140.94823433764D, 140.63941906069999D, 140.32935661856001D, 140.01802215512001D, 139.70539014191999D, 139.39143435122D, 139.07612782765D, 138.75944285854999D, 138.44135094252999D, 138.12182275654999D, 137.80082812114D, 137.47833596371001D, 137.15431427990001D, 136.82873009273001D, 136.50154940944D, 136.17273717593D, 135.84225722842001D, 135.51007224241999D, 135.17614367857001D, 134.84043172525D, 134.50289523767D, 134.16349167321999D, 133.82217702269D, 133.47890573716001D, 133.13363065017001D, 132.78630289474D, 132.43687181493999D, 132.08528487139D, 131.73148754037999D, 131.37542320589D, 131.01703304403D, 130.65625589909999D, 130.29302815074001D, 129.92728357102001D, 129.55895317097D, 129.18796503511001D, 128.81424414327D, 128.43771217807D, 128.05828731695999D, 127.6758840071D, 127.29041272129D, 126.90177969315D, 126.50988662912999D, 126.11463039499D, 125.71590267388D, 125.31358959272001D, 124.90757131337D, 124.49772158439001D, 124.08390724856D, 123.66598770081001D, 123.24381429032999D, 122.8172296596D, 122.38606701198D, 121.95014929841D, 121.50928831175D, 121.06328367582D, 120.61192171363D, 120.15497417692001D, 119.69219681529D, 119.22332775992D, 118.74808569116D, 118.26616775411D, 117.77724717804D, 117.28097054688D, 116.77695465604999D, 116.26478287643D, 115.74400092745999D, 115.21411193796D, 114.67457064192D, 114.12477651701001D, 113.56406562012999D, 112.99170080476D, 112.40685990967D, 111.80862138029001D, 111.19594660602D, 110.56765800763D, 109.92241155422001D, 109.25866187532D, 108.57461737343D, 107.86818159517D, 107.13687534176999D, 106.37773117245D, 105.58714731009D, 104.76068005158D, 103.89273974322001D, 102.97612917857001D, 102.00131139134D, 100.95518334451D, 99.818874369455997D, 98.563411678124993D, 97.140005601341997D, 95.453488232015005D, 93.258067467591005D, 87.964594300513994D };
/* 118 */   double[] au4 = { 175.92918860103001D, 176.17918943145D, 176.42919524454999D, 176.67921102392D, 176.92924175491001D, 177.17929242559001D, 177.42936802758999D, 177.67947355699999D, 177.92961401532D, 178.17979441032D, 178.43001975695D, 178.68029507827001D, 178.93062540635D, 179.18101578318999D, 179.43147126163001D, 179.68199690631999D, 179.93259779461999D, 180.18327901753D, 180.43404568067999D, 180.68490290525D, 180.93585582897001D, 181.18690960705001D, 181.43806941317999D, 181.68934044053D, 181.94072790273D, 182.19223703492D, 182.44387309473001D, 182.69564136330999D, 182.94754714644D, 183.19959577551001D, 183.45179260864001D, 183.70414303177D, 183.95665245973001D, 184.20932633737999D, 184.46217014075D, 184.71518937817001D, 184.96838959146001D, 185.22177635707001D, 185.47535528737001D, 185.72913203178001D, 185.98311227810001D, 186.23730175368999D, 186.49170622685D, 186.74633150807D, 187.00118345138D, 187.25626795573001D, 187.51159096635999D, 187.76715847621D, 188.02297652739D, 188.2790512126D, 188.53538867667999D, 188.79199511813999D, 189.04887679068D, 189.30604000483001D, 189.56349112955999D, 189.82123659397999D, 190.07928288898D, 190.33763656907001D, 190.59630425405999D, 190.85529263097999D, 191.11460845587001D, 191.37425855575D, 191.63424983057001D, 191.89458925517999D, 192.15528388145D, 192.41634084031D, 192.67776734399001D, 192.93957068815999D, 193.20175825428001D, 193.46433751187999D, 193.72731602099D, 193.99070143458999D, 194.25450150114D, 194.5187240672D, 194.78337708007001D, 195.04846859054999D, 195.31400675578999D, 195.57999984213001D, 195.84645622817001D, 196.11338440777001D, 196.38079299328999D, 196.64869071877999D, 196.91708644337999D, 197.18598915479001D, 197.45540797277999D, 197.72535215294999D, 197.99583109045D, 198.26685432391D, 198.53843153950999D, 198.81057257507001D, 199.08328742443999D, 199.35658624185999D, 199.63047934661D, 199.90497722768001D, 200.18009054872999D, 200.45583015311999D, 200.73220706915001D, 201.00923251547999D, 201.28691790674D, 201.56527485932D, 201.84431519738999D, 202.1240509591D, 202.40449440306D, 202.68565801502001D, 202.96755451474999D, 203.25019686328D, 203.53359827034001D, 203.81777220207999D, 204.10273238908999D, 204.38849283479999D, 204.67506782408D, 204.96247193226D, 205.25072003452999D, 205.53982731562999D, 205.82980927996999D, 206.12068176225D, 206.41246093832001D, 206.70516333671D, 206.99880585049999D, 207.29340574971999D, 207.58898069432001D, 207.88554874767999D, 208.18312839070001D, 208.48173853649999D, 208.78139854582D, 209.08212824308001D, 209.38394793316999D, 209.68687841901999D, 209.99094102000001D, 210.29615759114D, 210.60255054333001D, 210.91014286441001D, 211.21895814135999D, 211.5290205835D, 211.84035504694D, 212.15298706012999D, 212.46694285084001D, 212.78224937440001D, 213.09893434351D, 213.41702625952999D, 213.73655444549999D, 214.05754908091001D, 214.38004123835D, 214.70406292216001D, 215.02964710933D, 215.35682779261001D, 215.68564002612001D, 216.01611997363D, 216.34830495963999D, 216.68223352349D, 217.01794547681001D, 217.35548196438D, 217.69488552883001D, 218.03620017937001D, 218.37947146490001D, 218.72474655189001D, 219.07207430731D, 219.42150538711999D, 219.77309233066001D, 220.12688966166999D, 220.48295399616001D, 220.84134415803001D, 221.20212130294999D, 221.56534905132D, 221.93109363103D, 222.29942403109001D, 222.67041216694D, 223.04413305879001D, 223.42066502399001D, 223.80008988509999D, 224.18249319495999D, 224.56796448077D, 224.95659750890999D, 225.34849057292999D, 225.74374680706001D, 226.14247452817D, 226.54478760934001D, 226.95080588868001D, 227.36065561766D, 227.77446995349999D, 228.19238950125001D, 228.61456291171999D, 229.04114754246001D, 229.47231019008001D, 229.90822790364999D, 230.34908889030001D, 230.79509352624001D, 231.24645548842D, 231.70340302514001D, 232.16618038676D, 232.63504944214D, 233.11029151088999D, 233.59220944794001D, 234.08113002401001D, 234.57740665518D, 235.081422546D, 235.59359432562999D, 236.1143762746D, 236.6442652641D, 237.18380656012999D, 237.73360068504999D, 238.29431158192D, 238.86667639729001D, 239.45151729239001D, 240.04975582176999D, 240.66243059602999D, 241.29071919443001D, 241.93596564782999D, 242.59971532674001D, 243.28375982863D, 243.99019560689001D, 244.72150186029D, 245.48064602961D, 246.27122989196999D, 247.09769715048D, 247.96563745884001D, 248.88224802349001D, 249.85706581072D, 250.90319385755001D, 252.03950283259999D, 253.29496552392999D, 254.71837160070999D, 256.40488897004002D, 258.60030973446999D, 263.89378290154002D };
/* 119 */   double[] ac = { 1.0D, 0.9999955157621D, 0.99998206278026D, 0.99995964025005D, 0.99992824683045D, 0.99988788064347D, 0.99983853927361D, 0.99978021976711D, 0.99971291863107D, 0.9996366318324D, 0.99955135479663D, 0.99945708240652D, 0.99935380900051D, 0.99924152837103D, 0.99912023376263D, 0.99898991786994D, 0.99885057283543D, 0.99870219024708D, 0.99854476113577D, 0.9983782759726D, 0.99820272466593D, 0.99801809655833D, 0.99782438042332D, 0.99762156446188D, 0.9974096362988401D, 0.99718858297905D, 0.99695839096335D, 0.99671904612439D, 0.99647053374215D, 0.99621283849942D, 0.99594594447692D, 0.99566983514828D, 0.99538449337485D, 0.9950899014002D, 0.99478604084447D, 0.99447289269847D, 0.99415043731757D, 0.99381865441531D, 0.99347752305684D, 0.99312702165208D, 0.99276712794858D, 0.9923978190242601D, 0.99201907127974D, 0.99163086043048D, 0.99123316149868D, 0.99082594880482D, 0.99040919595894D, 0.9899828758517D, 0.98954696064499D, 0.98910142176239D, 0.98864622987921D, 0.98818135491224D, 0.98770676600917D, 0.98722243153762D, 0.98672831907391D, 0.98622439539137D, 0.98571062644833D, 0.98518697737573D, 0.98465341246427D, 0.98410989515126D, 0.98355638800695D, 0.98299285272048D, 0.98241925008536D, 0.98183553998455D, 0.98124168137496D, 0.98063763227155D, 0.98002334973089D, 0.97939878983423D, 0.97876390766995D, 0.9781186573156D, 0.97746299181917D, 0.97679686317999D, 0.97612022232881D, 0.97543301910737D, 0.97473520224731D, 0.97402671934832D, 0.97330751685569D, 0.97257754003703D, 0.97183673295833D, 0.9710850384591701D, 0.9703223981271401D, 0.96954875227144D, 0.96876403989561D, 0.96796819866929D, 0.96716116489913D, 0.96634287349868D, 0.9655132579572701D, 0.96467225030786D, 0.96381978109376D, 0.96295577933429D, 0.96208017248913D, 0.96119288642163D, 0.96029384536063D, 0.95938297186116D, 0.95846018676356D, 0.95752540915132D, 0.95657855630736D, 0.95561954366869D, 0.95464828477951D, 0.95366469124261D, 0.9526686726689601D, 0.95166013662542D, 0.95063898858064D, 0.9496051318487701D, 0.9485584675312D, 0.94749889445601D, 0.94642630911517D, 0.94534060559926D, 0.94424167552973D, 0.94312940798849D, 0.94200368944471D, 0.94086440367874D, 0.939711431703D, 0.93854465167964D, 0.93736393883491D, 0.93616916536995D, 0.93496020036797D, 0.93373690969746D, 0.93249915591143D, 0.9312467981422901D, 0.9299796919922601D, 0.92869768941902D, 0.92740063861639D, 0.92608838388976D, 0.92476076552589D, 0.92341761965697D, 0.92205877811846D, 0.92068406830036D, 0.91929331299173D, 0.91788633021777D, 0.91646293306933D, 0.91502292952422D, 0.9135661222599D, 0.91209230845704D, 0.91060127959339D, 0.90909282122735D, 0.90756671277068D, 0.9060227272496D, 0.90446063105349D, 0.9028801836706401D, 0.90128113740991D, 0.8996632371076D, 0.89802621981845D, 0.8963698144897601D, 0.8946937416174D, 0.89299771288265D, 0.89128143076828D, 0.88954458815265D, 0.8877868678801D, 0.88600794230603D, 0.88420747281472D, 0.88238510930797D, 0.88054048966219D, 0.87867323915185D, 0.87678296983625D, 0.8748692799072D, 0.87293175299409D, 0.87096995742318D, 0.86898344542724D, 0.86697175230139D, 0.86493439550069D, 0.86287087367435D, 0.86078066563109D, 0.8586632292296D, 0.85651800018722D, 0.85434439079946D, 0.85214178856194D, 0.84990955468559D, 0.84764702249477D, 0.84535349569673D, 0.8430282465097D, 0.84067051363496D, 0.83827950005691D, 0.83585437065279D, 0.8333942495915D, 0.83089821749835D, 0.82836530835928D, 0.82579450613484D, 0.82318474104962D, 0.82053488551853D, 0.8178437496651601D, 0.81511007638121D, 0.81233253586812D, 0.80950971959281D, 0.8066401335786501D, 0.80372219093998D, 0.80075420355298D, 0.79773437273739D, 0.79466077880133D, 0.79153136927478D, 0.78834394562442D, 0.78509614820297D, 0.78178543913697D, 0.77840908279653D, 0.77496412341522D, 0.77144735933398D, 0.76785531322417D, 0.76418419749364D, 0.76042987388672D, 0.75658780603887D, 0.7526530034219D, 0.74861995468702D, 0.7444825478438D, 0.74023397394722D, 0.7358666099214D, 0.7313718747093601D, 0.72674005092081D, 0.72196006127989D, 0.7170191850155701D, 0.71190269319297D, 0.70659337270459D, 0.70107089428097D, 0.6953109570359201D, 0.68928410455801D, 0.68295404372319D, 0.67627518407889D, 0.66918890425689D, 0.66161763343554D, 0.65345494527344D, 0.64454778538549D, 0.63466150337114D, 0.62340153265982D, 0.60999940210161D, 0.59247352022473D, 0.55D };
/* 120 */   double[] ac2 = { 1.124491140288E-63D, 3.0948560502011E-06D, 4.949821976335E-05D, 0.00025042047759288D, 0.00079072608853273D, 0.0019282059931718D, 0.003992562354241D, 0.0073841089836496D, 0.012572191751247D, 0.02009333419708D, 0.03054911447886D, 0.04460378067675D, 0.062981612345596D, 0.08646403704766201D, 0.11588651141401D, 0.15213517706728D, 0.19614330249057D, 0.24888752264317D, 0.31138388880322D, 0.38468374175604D, 0.46986942204421D, 0.56804983154909D, 0.68035586118126D, 0.80793569991853D, 0.95195004084195D, 1.1135672001831D, 1.2939581657065D, 1.4942915910108D, 1.7157287525381D, 1.959418486232D, 2.2264921208868D, 2.5180584252691D, 2.8351985860875D, 3.1789612338153D, 3.5503575332561D, 3.950356355565D, 4.379879548211D, 4.8397973190864D, 5.330923750637D, 5.8540124595004D, 6.4097524167103D, 6.9987639430401D, 7.6215948935309D, 8.278717044675799D, 8.970522697112999D, 9.697321506022799D, 10.459337550722999D, 11.256706654223001D, 12.089473962723D, 12.957591794241999D, 13.860917764727001D, 14.799213199128999D, 15.772141834049D, 16.779268817647999D, 17.820060011580001D, 18.893881598787001D, 20.0D, 21.137582100856999D, 22.305695790554999D, 23.503310811988001D, 24.729299922313999D, 25.982440361969001D, 27.261415629106001D, 28.564817555531999D, 29.891148679227999D, 31.238824907602002D, 32.606178464711D, 33.991461114792003D, 35.392847653525997D, 36.808439657660998D, 38.236269482738003D, 39.674304497919998D, 41.120451546115D, 42.572561616903002D, 44.028434719056001D, 45.485824938809003D, 46.942445669438001D, 48.395974997133003D, 49.844061227640999D, 51.284328537687998D, 52.714382734786D, 54.131817108636D, 55.534218357047003D, 56.919172569023999D, 58.284271247462001D, 59.627117353732999D, 60.945331356360001D, 62.236557265911998D, 63.498468638284002D, 64.728774528578001D, 65.925225377922004D, 67.085618815752994D, 68.207805360307006D, 69.289694000349002D, 70.329257641504D, 71.324538400953003D, 72.273652734684006D, 73.174796381972996D, 74.026249112317004D, 74.826379260615994D, 75.573648037015005D, 76.266613598508002D, 76.903934870086999D, 77.484375103977996D, 78.006805166296999D, 78.470206541242007D, 78.873674043812997D, 79.216418232909007D, 79.497767517547999D, 79.717169949886994D, 79.874194699645003D, 79.968533205499995D, 80.0D, 79.968533205499995D, 79.874194699645003D, 79.717169949886994D, 79.497767517547999D, 79.216418232909007D, 78.873674043812997D, 78.470206541242007D, 78.006805166296999D, 77.484375103977996D, 76.903934870086999D, 76.266613598508002D, 75.573648037015005D, 74.826379260615994D, 74.026249112317004D, 73.174796381972996D, 72.273652734684006D, 71.324538400953003D, 70.329257641504D, 69.289694000349002D, 68.207805360307006D, 67.085618815752994D, 65.925225377922004D, 64.728774528578001D, 63.498468638284002D, 62.236557265911998D, 60.945331356360001D, 59.627117353732999D, 58.284271247462001D, 56.919172569023999D, 55.534218357047003D, 54.131817108636D, 52.714382734786D, 51.284328537687998D, 49.844061227640999D, 48.395974997133003D, 46.942445669438001D, 45.485824938809003D, 44.028434719056001D, 42.572561616903002D, 41.120451546115D, 39.674304497919998D, 38.236269482738003D, 36.808439657660998D, 35.392847653525997D, 33.991461114792003D, 32.606178464711D, 31.238824907602002D, 29.891148679227999D, 28.564817555531999D, 27.261415629106001D, 25.982440361969001D, 24.729299922313999D, 23.503310811988001D, 22.305695790554999D, 21.137582100856999D, 20.0D, 18.893881598787001D, 17.820060011580001D, 16.779268817647999D, 15.772141834049D, 14.799213199128999D, 13.860917764727001D, 12.957591794241999D, 12.089473962723D, 11.256706654223001D, 10.459337550722999D, 9.697321506022799D, 8.970522697112999D, 8.278717044675799D, 7.6215948935309D, 6.9987639430401D, 6.4097524167103D, 5.8540124595004D, 5.330923750637D, 4.8397973190864D, 4.379879548211D, 3.950356355565D, 3.5503575332561D, 3.1789612338153D, 2.8351985860875D, 2.5180584252691D, 2.2264921208868D, 1.959418486232D, 1.7157287525381D, 1.4942915910108D, 1.2939581657065D, 1.1135672001831D, 0.95195004084195D, 0.80793569991853D, 0.68035586118126D, 0.56804983154909D, 0.46986942204421D, 0.38468374175604D, 0.31138388880322D, 0.24888752264317D, 0.19614330249057D, 0.15213517706728D, 0.11588651141401D, 0.08646403704766201D, 0.062981612345596D, 0.04460378067675D, 0.03054911447886D, 0.02009333419708D, 0.012572191751247D, 0.0073841089836496D, 0.003992562354241D, 0.0019282059931718D, 0.00079072608853273D, 0.00025042047759288D, 4.949821976335E-05D, 3.0948560502011E-06D, 1.124491140288E-63D };
/* 121 */   double[] ac3 = {};
/* 122 */   double[] ac4 = {};
/* 123 */   double[] asin = { 0.0D, 0.014465392195567D, 0.02892775738459D, 0.043384069193956D, 0.057831302517269D, 0.072266434147885D, 0.086686443411544D, 0.10108831279847D, 0.1154690285948D, 0.12982558151326D, 0.14415496732285D, 0.15845418747752D, 0.17272024974364D, 0.18695016882616D, 0.20114096699329D, 0.21528967469963D, 0.22939333120756D, 0.24344898520681D, 0.25745369543205D, 0.27140453127836D, 0.2852985734145D, 0.29913291439379D, 0.31290465926253D, 0.3266109261658D, 0.34024884695049D, 0.35381556776548D, 0.36730824965889D, 0.38072406917209D, 0.39406021893056D, 0.40731390823135D, 0.42048236362708D, 0.43356282950628D, 0.44655256867003D, 0.45944886290476D, 0.47224901355104D, 0.48495034206831D, 0.49755019059538D, 0.51004592250661D, 0.52243492296365D, 0.53471459946262D, 0.5468823823766D, 0.55893572549337D, 0.5708721065482D, 0.58268902775167D, 0.59438401631236D, 0.60595462495428D, 0.61739843242902D, 0.62871304402236D, 0.6398960920554601D, 0.65094523638024D, 0.66185816486913D, 0.67263259389888D, 0.68326626882844D, 0.69375696447073D, 0.70410248555833D, 0.71430066720283D, 0.72434937534783D, 0.73424650721556D, 0.74398999174686D, 0.7535777900346D, 0.7630078957503D, 0.77227833556402D, 0.78138716955725D, 0.79033249162889D, 0.7991124298940801D, 0.80772514707595D, 0.81616884089007D, 0.82444174442158D, 0.83254212649493D, 0.84046829203617D, 0.84821858242764D, 0.85579137585507D, 0.8631850876469001D, 0.87039817060597D };
/* 124 */   double[] acos = { 1.0D, 0.99989537074067D, 0.9995815048572601D, 0.99905846802886D, 0.9983263697054D, 0.99738536308468D, 0.99623564508035D, 0.9948774562807D, 0.99331108089831D, 0.99153684671057D, 0.9895551249911D, 0.98736633043204D, 0.98497092105731D, 0.98236939812673D, 0.97956230603112D, 0.97655023217842D, 0.97333380687075D, 0.96991370317249D, 0.96629063676949D, 0.96246536581925D, 0.9584386907923D, 0.95421145430469D, 0.94978454094168D, 0.9451588770725901D, 0.94033543065699D, 0.93531521104213D, 0.93009926875174D, 0.92468869526617D, 0.91908462279401D, 0.91328822403516D, 0.90730071193546D, 0.90112333943279D, 0.894757399195D, 0.8882042233493001D, 0.8814651832035501D, 0.87454168895933D, 0.86743518941677D, 0.86014717167144D, 0.85267916080315D, 0.8450327195567801D, 0.8372094480153101D, 0.82921098326494D, 0.82103899905256D, 0.81269520543548D, 0.8041813484236D, 0.79549920961401D, 0.78665060581823D, 0.77763738868198D, 0.76846144429773D, 0.75912469281D, 0.74962908801358D, 0.73997661694466D, 0.7301692994650399D, 0.72020918783945D, 0.71009836630609D, 0.6998389506405D, 0.6894330877128D, 0.67888295503846D, 0.66819076032261D, 0.65735874099807D, 0.64638916375717D, 0.63528432407739D, 0.62404654574102D, 0.61267818034893D, 0.6011816068284001D, 0.58955923093539D, 0.57781348475105D, 0.56594682617284D, 0.55396173840014D, 0.54186072941468D, 0.52964633145566D, 0.51732110048991D, 0.50488761567701D, 0.49234847882956D };
/* 125 */   double[] sqr = { 15.968719422671001D, 22.583179581271999D, 27.658633371878999D, 31.937438845342999D, 35.707142142713998D, 39.115214431216003D, 42.249260348554998D, 45.166359162545D, 47.906158268014003D, 50.49752469181D, 52.962250707461003D, 55.317266743757003D, 57.576036681939001D, 59.749476985158999D, 61.846584384265D, 63.874877690684997D, 65.840716885526007D, 67.749538743816998D, 69.606034221179002D, 71.414284285427996D, 73.177865505903D, 74.899933244295994D, 76.583287994182996D, 78.230428862432007D, 79.843597113357006D, 81.424811943289001D, 82.975900115635994D, 84.498520697109996D, 85.994185849974997D, 87.464278422679996D, 88.910066921581006D, 90.332718325089999D, 91.733309108523997D, 93.112834775878D, 94.472218138456D, 95.812316536028007D, 97.133928161070003D, 98.437797618597997D, 99.724620831568004D, 100.99504938362D, 102.24969437607D, 103.48912986396D, 104.71389592599D, 105.92450141492D, 107.12142642814D, 108.3051245325D, 109.47602477255001D, 110.63453348751D, 111.7810359587D, 112.91589790636D, 114.03946685248999D, 115.15207336388001D, 116.25403218814D, 117.34564329365D, 118.42719282327D, 119.49895397032D, 120.56118778446D, 121.61414391427D, 122.65806129236D, 123.69316876853D, 124.71968569556D, 125.737822472D, 126.74778104567D, 127.74975538136999D, 128.74393189584001D, 129.73048986264001D, 130.70960178962D, 131.68143377105D, 132.64614581660001D, 133.60389215887D, 134.55482154126D, 135.49907748762999D, 136.43679855523001D, 137.36811857196D, 138.29316685939D, 139.21206844235999D, 140.12494424619999D, 141.03191128252001D, 141.93308282427D, 142.82856857086D, 143.71847480404D, 144.60290453514D, 145.48195764424D, 146.35573101181001D, 147.22431864334999D, 148.08781178747D, 148.94629904767999D, 149.79986648859D, 150.64859773659001D, 151.49257407543001D, 152.33187453714001D, 153.16657598837D, 153.99675321253D, 154.82247898803001D, 155.64382416273D, 156.46085772486001D, 157.27364687067001D, 158.08225706891D, 158.88675212237999D, 159.68719422671001D, 160.48364402642D, 161.27616066858999D, 162.06480185407D, 162.84962388657999D, 163.63068171954001D, 164.40802900102D, 165.18171811675001D, 165.95180023127D, 166.71832532747999D, 167.48134224443999D, 168.24089871371999D, 168.99704139421999D, 169.74981590563999D, 170.49926686059001D, 171.24543789544001D, 171.98837169994999D, 172.72811004581999D, 173.46469381404D, 174.19816302130999D, 174.92855684535999D, 175.65591364938001D, 176.38027100556999D, 177.10166571775D, 177.82013384315999D, 178.53571071357001D, 179.24843095547999D, 179.95832850969001D, 180.66543665018D, 181.3697880023D, 182.07141456033D, 182.77034770443001D, 183.46661821705001D, 184.16025629869D, 184.85129158326001D, 185.53975315279001D, 186.22566955176001D, 186.90906880085001D, 187.58997841036D, 188.26842539310999D, 188.94443627691001D, 189.61803711672999D, 190.28925350634D, 190.95811058973001D, 191.62463307205999D, 192.28884523029001D, 192.95077092356999D, 193.61043360315D, 194.26785632214001D, 194.92306174487999D, 195.57607215607999D, 196.22690946962001D, 196.8755952372D, 197.52215065658001D, 198.16659657975001D, 198.80895352070999D, 199.44924166313999D, 200.08748086774D, 200.72369067950001D, 201.3578903346D, 201.99009876724D, 202.62033461625001D, 203.24861623145D, 203.87496167994999D, 204.49938875213999D, 205.12191496765999D, 205.74255758107D, 206.36133358747D, 206.97825972792D, 207.59335249473D, 208.20662813657D, 208.81810266354D, 209.42779185199001D, 210.03571124929999D, 210.64187617850001D, 211.24630174277999D, 211.84900282985001D, 212.44999411626D, 213.04929007157D, 213.64690496237D, 214.24285285629D, 214.83714762581999D, 215.42980295213999D, 216.02083232874D, 216.610249065D, 217.19806628973001D, 217.78429695457999D, 218.36895383730999D, 218.95204954510001D, 219.53359651771001D, 220.11360703055001D, 220.69209319774001D, 221.26906697503D, 221.84454016270001D, 222.41852440837999D, 222.99103120978D, 223.5620719174D, 224.13165773713999D, 224.69979973289D, 225.26650882899D, 225.83179581272D, 226.39567133671D, 226.95814592121999D, 227.5192299565D, 228.07893370497999D, 228.63726730347D, 229.19424076534D, 229.74986398255001D, 230.30414672776001D, 230.85709865628999D, 231.40872930812D, 231.95904810978999D, 232.50806437627D, 233.05578731282D, 233.60222601679001D, 234.14738947935999D, 234.6912865873D, 235.23392612461001D, 235.77531677425D, 236.3154671197D, 236.85438564654001D, 237.39208074407D, 237.92856070677999D, 238.46383373584999D, 238.99790794063D, 239.53079134007001D, 240.0624918641D, 240.59301735503001D, 241.12237556892001D, 241.65057417685D, 242.17762076624999D, 242.70352284217D, 243.22828782853D, 243.75192306933999D, 244.27443582986999D, 244.79583329786999D, 245.31612258472001D, 245.83531072650999D, 246.35340468522D, 246.87041134975999D, 247.38633753706D, 247.90118999310999D, 248.41497539400001D, 248.92770034691D, 249.43937139113001D, 249.94999499900001D, 250.45957757689999D, 250.96812546615999D, 251.47564494400001D, 251.98214222440001D, 252.48762345905001D, 252.99209473816001D, 253.49556209132999D, 253.99803148843D, 254.49950884039001D, 255.0D };
/*     */ 
/*     */   public void init()
/*     */   {
/* 130 */     String str1;
/* 130 */     if ((str1 = getParameter("m_mode")) != null) this.m_mode = Integer.valueOf(str1).intValue();
/* 131 */     if ((str1 = getParameter("c_mode")) != null) this.c_mode = Integer.valueOf(str1).intValue();
/* 132 */     if ((str1 = getParameter("seq_mode")) != null) this.seq_mode = Integer.valueOf(str1).intValue();
/*     */ 
/* 135 */     String str2 = getParameter("basePicture");
/*     */     try
/*     */     {
/* 138 */       URL localURL1 = new URL(getCodeBase().toString() + str2);
/* 139 */       this.bImg4 = ImageIO.read(localURL1);
/*     */     } catch (IOException localIOException1) {
/* 141 */       System.out.println("basePicture read error:" + str2);
/*     */     }
/* 143 */     this.gg0.drawImage(this.bImg4, 0, 0, this);
/*     */ 
/* 146 */     String str3 = getParameter("initPicture");
/*     */     try
/*     */     {
/* 149 */       URL localURL2 = new URL(getCodeBase().toString() + str3);
/* 150 */       this.bImg1 = ImageIO.read(localURL2);
/*     */     } catch (IOException localIOException2) {
/* 152 */       System.out.println("initPicture read error:" + str3);
/*     */     }
/* 154 */     this.gg1.drawImage(this.bImg1, 0, 0, this);
/*     */ 
/* 157 */     String str4 = getParameter("titlePicture");
/*     */     try
/*     */     {
/* 160 */       URL localURL3 = new URL(getCodeBase().toString() + str4);
/* 161 */       this.bImg3 = ImageIO.read(localURL3);
/*     */     } catch (IOException localIOException3) {
/* 163 */       System.out.println("titlePicture read error:" + str4);
/*     */     }
/* 165 */     this.gg3.drawImage(this.bImg3, 0, 0, this);
/*     */ 
/* 167 */     this.titleWidth = this.bImg3.getWidth();
/* 168 */     this.titleHeight = this.bImg3.getHeight();
/*     */ 
/* 170 */     if ((str1 = getParameter("titleOffsetX")) != null)
/* 171 */       this.titleOffsetX = Integer.valueOf(str1).intValue();
/*     */     else
/* 173 */       this.titleOffsetX = ((500 - this.titleWidth) / 2);
/* 174 */     if ((str1 = getParameter("titleOffsetY")) != null)
/* 175 */       this.titleOffsetY = Integer.valueOf(str1).intValue();
/*     */     else {
/* 177 */       this.titleOffsetY = ((333 - this.titleHeight) / 2);
/*     */     }
/*     */ 
/* 180 */     if ((str1 = getParameter("pictureCount")) != null) {
/* 181 */       this.pictureCount = Integer.valueOf(str1).intValue();
/*     */     }
/* 183 */     for (int i = 0; i < this.pictureCount; i++) {
/* 184 */       this.llist.append_node(getParameter("file" + i));
/*     */     }
/*     */ 
/* 187 */     addMouseListener(this);
/* 188 */     addKeyListener(this);
/*     */   }
/*     */ 
/*     */   public void start()
/*     */   {
/* 193 */     if (this.animator == null) {
/* 194 */       this.animator = new Thread(this);
/* 195 */       this.animator.start();
/*     */     }
/*     */   }
/*     */ 
/*     */   public void stop()
/*     */   {
/* 201 */     if (this.animator != null)
/*     */     {
/* 203 */       this.animator = null;
/*     */     }
/*     */   }
/*     */ 
/*     */   public synchronized void mousePressed(MouseEvent paramMouseEvent)
/*     */   {
/* 209 */     paramMouseEvent.consume();
/* 210 */     int i = paramMouseEvent.getModifiers();
/*     */ 
/* 212 */     if ((i & 0x10) == 16)
/*     */     {
/* 214 */       if (this.cont) {
/* 215 */         this.cont = false;
/*     */       } else {
/* 217 */         this.cont = true;
/* 218 */         notify();
/*     */       }
/*     */     }
/* 221 */     else if ((i & 0x4) == 4)
/* 222 */       System.out.println(this.url); 
/*     */   }
/*     */   public void mouseMoved(MouseEvent paramMouseEvent) {
/*     */   }
/*     */   public void mouseClicked(MouseEvent paramMouseEvent) {
/*     */   }
/*     */   public void mouseEntered(MouseEvent paramMouseEvent) {
/*     */   }
/*     */   public void mouseExited(MouseEvent paramMouseEvent) {
/*     */   }
/*     */   public void mouseReleased(MouseEvent paramMouseEvent) {  }
/*     */ 
/* 232 */   public void keyPressed(KeyEvent paramKeyEvent) { System.out.println("keyPressed()");
/* 233 */     paramKeyEvent.consume();
/* 234 */     switch ((char)paramKeyEvent.getKeyCode()) { case '0':
/* 235 */       this.m_mode = 0;
/* 236 */       break;
/*     */     case '1':
/* 237 */       this.m_mode = 1;
/* 238 */       break;
/*     */     case '2':
/* 239 */       this.m_mode = 2;
/* 240 */       break;
/*     */     case 'c':
/* 241 */       if (this.c_mode == 0) this.c_mode = 1; else
/* 242 */         this.c_mode = 0;
/* 243 */       break;
/*     */     case '-':
/* 244 */       this.wait_time += 1L;
/* 245 */       System.out.println("wait = " + this.wait_time);
/* 246 */       break;
/*     */     case '+':
/* 247 */       this.wait_time -= 1L;
/* 248 */       if (this.wait_time < 0L) this.wait_time = 0L;
/* 249 */       System.out.println("wait = " + this.wait_time); } }
/*     */ 
/*     */   public void keyReleased(KeyEvent paramKeyEvent)
/*     */   {
/*     */   }
/*     */ 
/*     */   public void keyTyped(KeyEvent paramKeyEvent) {
/*     */   }
/*     */ 
/*     */   public void run() {
/* 259 */     while (Thread.currentThread() == this.animator)
/*     */     {
/* 261 */       double d1 = 0.0D;
/* 262 */       double d2 = 0.025D;
/*     */ 
/* 265 */       for (int i = 0; i < 40; i++)
/*     */       {
/* 267 */         chromakey(this.titleOffsetX, this.titleOffsetY, d1);
/* 268 */         repaint();
/* 269 */         getToolkit().sync();
/*     */ 
/* 271 */         d1 += d2;
/* 272 */         if (d1 < 0.0D) d2 = -d2;
/* 273 */         if (d1 <= 1.0D) continue; d2 = -d2;
/*     */       }
/*     */ 
/* 276 */       Date localDate1 = new Date();
/*     */ 
/* 279 */       for (int j = 0; j < 80; j++)
/*     */       {
/* 281 */         chromakey(this.titleOffsetX, this.titleOffsetY, d1);
/* 282 */         repaint();
/* 283 */         getToolkit().sync();
/*     */ 
/* 285 */         d1 += d2;
/* 286 */         if (d1 < 0.0D) d2 = -d2;
/* 287 */         if (d1 <= 1.0D) continue; d2 = -d2;
/*     */       }
/*     */ 
/* 290 */       long l1 = localDate1.getTime();
/*     */ 
/* 292 */       Date localDate2 = new Date();
/* 293 */       long l2 = localDate2.getTime();
/* 294 */       long l3 = l2 - l1;
/* 295 */       if (this.debug) System.out.println("difference(ms) = " + l3 + "\n");
/*     */ 
/* 300 */       this.wait_time = ()(l3 * -0.0355D + 35.5D);
/* 301 */       if (this.wait_time < 0L) this.wait_time = 0L;
/* 302 */       if (this.debug) System.out.println("wait_time = " + this.wait_time);
/*     */ 
/* 304 */       while (!this.cont)
/*     */       {
/* 306 */         chromakey(this.titleOffsetX, this.titleOffsetY, d1);
/* 307 */         repaint();
/* 308 */         getToolkit().sync();
/*     */         try
/*     */         {
/* 311 */           Thread.sleep(this.wait_time / 2L);
/*     */         } catch (InterruptedException localInterruptedException1) {
/* 313 */           break;
/*     */         }
/*     */ 
/* 316 */         d1 += d2;
/* 317 */         if (d1 < 0.0D) d2 = -d2;
/* 318 */         if (d1 <= 1.0D) continue; d2 = -d2;
/*     */       }
/*     */ 
/* 323 */       this.gg1.drawImage(this.base, 0, 0, this);
/* 324 */       this.onshow = true;
/*     */       while (true)
/*     */       {
/*     */         Object localObject1;
/* 331 */         if (this.seq_mode == 0)
/*     */         {
/* 333 */           if ((localObject1 = this.llist.get_data(this.pict_idx++)) == null) {
/* 334 */             this.pict_idx = 1;
/* 335 */             localObject1 = this.llist.get_data(this.pict_idx++);
/*     */           }
/*     */         }
/*     */         else
/*     */         {
/*     */           int k;
/* 340 */           while ((k = (int)(Math.random() * this.pictureCount)) == this.pict_idx);
/* 341 */           this.pict_idx = k;
/* 342 */           localObject1 = this.llist.get_data(this.pict_idx);
/*     */         }
/*     */         try
/*     */         {
/* 346 */           this.url = new URL(getCodeBase().toString() + localObject1);
/* 347 */           this.bImg2 = ImageIO.read(this.url);
/*     */         } catch (IOException localIOException) {
/* 349 */           System.out.println("nextPicture read error:" + localObject1);
/*     */         }
/* 351 */         this.gg2.drawImage(this.bImg2, 0, 0, this);
/*     */ 
/* 353 */         int step = 8;
/*     */ 
/* 355 */         for (int w = (int)this.K; w >= -309.5D - step; w -= step)
/*     */         {
/* 357 */           process(w, step);
/* 358 */           repaint();
/* 359 */           getToolkit().sync();
/*     */           try
/*     */           {
/* 366 */             synchronized (this) {
/* 367 */               while (!this.cont) wait(); 
/*     */             }
/*     */           }
/*     */           catch (InterruptedException localInterruptedException3) {
/* 370 */             break;
/*     */           }
/*     */           try
/*     */           {
/* 374 */             Thread.sleep(this.wait_time);
/*     */           } catch (InterruptedException localInterruptedException4) {
/* 376 */             break;
/*     */           }
/*     */         }
/*     */         try
/*     */         {
/* 381 */           Thread.sleep(3000L);
/*     */         } catch (InterruptedException localInterruptedException2) {
/* 383 */           break;
/*     */         }
/*     */ 
/* 386 */         this.gg1.drawImage(this.bImg2, 0, 0, this);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */   public void update(Graphics paramGraphics) {
/* 392 */     paint(paramGraphics);
/*     */   }
/*     */   public void paint(Graphics paramGraphics) {
/* 395 */     Graphics2D localGraphics2D = (Graphics2D)paramGraphics;
/*     */ 
/* 397 */     localGraphics2D.drawImage(this.base, 0, 0, this);
/*     */   }
/*     */ 
/*     */   public void chromakey(int paramInt1, int paramInt2, double paramDouble)
/*     */   {
/* 405 */     for (int i6 = -167; i6 < 166; i6++) {
/* 406 */       int j = -i6 + 166 - 1;
/* 407 */       for (int i7 = -250; i7 < 250; i7++) {
/* 408 */         int i = i7 + 250;
/*     */ 
/* 410 */         int k = this.db1.getElem(i + j * 517);
/* 411 */         if ((paramInt1 <= i) && (i < paramInt1 + this.titleWidth) && (paramInt2 <= j) && (j < paramInt2 + this.titleHeight))
/*     */         {
/* 413 */           int n = (k & 0xFF0000) >> 16;
/* 414 */           int i1 = (k & 0xFF00) >> 8;
/* 415 */           int i2 = k & 0xFF;
/* 416 */           int m = this.db3.getElem(i - paramInt1 + (j - paramInt2) * 500);
/* 417 */           int i3 = (m & 0xFF0000) >> 16;
/* 418 */           int i4 = (m & 0xFF00) >> 8;
/* 419 */           int i5 = m & 0xFF;
/*     */ 
/* 421 */           if ((i5 < 240) || (i3 > 16) || (i4 > 16))
/*     */           {
/* 423 */             if ((i5 >= 40) && (i3 <= 16) && (i4 <= 16)) {
/* 424 */               double d = i5 / 255.0D;
/* 425 */               n = (int)((1.0D - paramDouble + paramDouble * d) * n);
/* 426 */               i1 = (int)((1.0D - paramDouble + paramDouble * d) * i1);
/* 427 */               i2 = (int)((1.0D - paramDouble + paramDouble * d) * i2);
/*     */             }
/*     */             else
/*     */             {
/* 431 */               n = (int)((1.0D - paramDouble) * n) + (int)(paramDouble * i3);
/* 432 */               i1 = (int)((1.0D - paramDouble) * i1) + (int)(paramDouble * i4);
/* 433 */               i2 = (int)((1.0D - paramDouble) * i2) + (int)(paramDouble * i5);
/*     */             }
/*     */           }
/* 435 */           k = (n << 16 & 0xFF0000) + (i1 << 8 & 0xFF00) + (i2 & 0xFF);
/*     */         }
/* 437 */         this.db0.setElem(i + j * 517, k);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */   public void process(int w, int step)
/*     */   {
/* 462 */     int i = (int)(w + 250 + 59.5D) / step;
/* 463 */     if (i < 0) i = 0;
/*     */ 
/* 465 */     this.sin = this.asin[i];
/* 466 */     this.cos = this.acos[i];
/*     */ 
/* 468 */     this.K = (250.0D * this.cos + 166.5D * this.sin);
/*     */ 
/* 475 */     for (int i18 = -167; i18 < 166; i18++) {
/* 476 */       int j = -i18 + 166 - 1;
/*     */ 
/* 478 */       for (int i19 = -250; i19 < 250; i19++) {
/* 479 */         int i = i19 + 250;
/*     */ 
/* 481 */         int i16 = this.db1.getElem(i + j * 517);
/* 482 */         int i4 = (i16 & 0xFF0000) >> 16;
/* 483 */         int i5 = (i16 & 0xFF00) >> 8;
/* 484 */         int i6 = i16 & 0xFF;
/*     */ 
/* 487 */         double d6 = i19 * this.cos - i18 * this.sin;
/* 488 */         double d7 = i19 * this.sin + i18 * this.cos;
/* 489 */         double p = d6 - w;
/* 490 */         double d9 = 2 * w + 175.92918860102841D - this.K;
/*     */         int region;
/* 493 */         if (w < this.K - 175.92918860102841D)
/* 494 */           region = 2;
/* 495 */         else if (w < this.K - 87.964594300514207D)
/* 496 */           region = 1;
/*     */         else {
/* 498 */           region = 0;
/*     */         }
/*     */ 
/* 501 */         if (((region != 2) || (((this.c_mode != 0) || (d6 > d9)) && ((this.c_mode != 1) || (p > -59.5D)))) && (((region != 1) && (region != 0)) || (p > 0.0D)))
/*     */         {
/*     */           double d10;
/*     */           double d13;
/*     */           double d5;
/* 504 */           if ((region == 2) && (this.c_mode == 1) && (p <= -56.0D))
/*     */           {
/* 506 */             d10 = 2 * w - d6 + 193.52210746113127D;
/*     */ 
/* 508 */             double d11 = d10 * this.cos + d7 * this.sin;
/* 509 */             d13 = -d10 * this.sin + d7 * this.cos;
/*     */ 
/* 511 */             if ((-250.0D <= d11) && (d11 < 250.0D) && (-167.0D <= d13) && (d13 < 166.0D))
/*     */             {
/* 513 */               d5 = this.ac4[(int)(-4.0D * p + 0.5D)];
/* 514 */               i4 = (int)(i4 * d5);
/* 515 */               i5 = (int)(i5 * d5);
/* 516 */               i6 = (int)(i6 * d5);
/*     */ 
/* 518 */               i16 = (i4 << 16 & 0xFF0000) + (i5 << 8 & 0xFF00) + (i6 & 0xFF);
/*     */             }
/*     */           }
/*     */           else
/*     */           {
/*     */             double d3;
/*     */             double d12;
/*     */             double d14;
/*     */             double d15;
/*     */             int i31;
/*     */             int i32;
/*     */             int i33;
/*     */             int i34;
/*     */             int i35;
/*     */             int i36;
/* 522 */             if ((region == 2) && (p <= 0.0D))
/*     */             {
/* 525 */               if (this.c_mode == 0) {
/* 526 */                 d10 = 2 * w - d6 + 175.92918860102841D;
/* 527 */                 d3 = 1.0D;
/*     */               } else {
/* 529 */                 int i23 = (int)(4.0D * p);
/* 530 */                 int i24 = i23 + 1;
/* 531 */                 d13 = 4.0D * p - i23;
/*     */ 
/* 533 */                 d10 = this.au4[(int)(-4.0D * p + 1.0D)] + w;
/* 534 */                 d3 = this.ac[(int)(-4.0D * p + 0.5D)];
/*     */               }
/*     */ 
/* 537 */               d12 = d10 * this.cos + d7 * this.sin;
/* 538 */               d13 = -d10 * this.sin + d7 * this.cos;
/* 539 */               if ((-250.0D <= d12) && (d12 < 250.0D) && (-167.0D <= d13) && (d13 < 166.0D))
/*     */               {
/* 541 */                 int i2 = (int)(d12 + 250.0D);
/* 542 */                 int i3 = (int)(-d13 + 166.0D - 1.0D);
/*     */ 
/* 544 */                 d14 = d12 + 250.0D - i2;
/* 545 */                 d15 = -d13 + 166.0D - 1.0D - i3;
/*     */                 int i25;
/*     */                 int i26;
/*     */                 int i27;
/*     */                 int i28;
/*     */                 int i29;
/*     */                 int i30;
/*     */                 int i7;
/*     */                 int i8;
/*     */                 int i9;
/* 547 */                 if (this.m_mode == 2)
/*     */                 {
/* 549 */                   i25 = ((int)(220.0D * d3) << 16 & 0xFF0000) + ((int)(220.0D * d3) << 8 & 0xFF00) + ((int)(220.0D * d3) & 0xFF);
/*     */ 
/* 551 */                   if (i2 == 499) {
/* 552 */                     i26 = this.db1.getElem(i + 1 + j * 517);
/*     */                   }
/*     */                   else {
/* 555 */                     i26 = ((int)(220.0D * d3) << 16 & 0xFF0000) + ((int)(220.0D * d3) << 8 & 0xFF00) + ((int)(220.0D * d3) & 0xFF);
/*     */                   }
/* 557 */                   if (i3 == 331) {
/* 558 */                     i27 = this.db1.getElem(i + j * 517 + 517);
/*     */                   }
/*     */                   else {
/* 561 */                     i27 = ((int)(220.0D * d3) << 16 & 0xFF0000) + ((int)(220.0D * d3) << 8 & 0xFF00) + ((int)(220.0D * d3) & 0xFF);
/*     */                   }
/* 563 */                   i28 = (i25 & 0xFF0000) >> 16;
/* 564 */                   i29 = (i25 & 0xFF00) >> 8;
/* 565 */                   i30 = i25 & 0xFF;
/* 566 */                   i31 = (i26 & 0xFF0000) >> 16;
/* 567 */                   i32 = (i26 & 0xFF00) >> 8;
/* 568 */                   i33 = i26 & 0xFF;
/* 569 */                   i34 = (i27 & 0xFF0000) >> 16;
/* 570 */                   i35 = (i27 & 0xFF00) >> 8;
/* 571 */                   i36 = i27 & 0xFF;
/*     */ 
/* 573 */                   i7 = (int)(i28 + d14 * (i31 - i28) + d15 * (i34 - i28) + 0.5D);
/* 574 */                   i8 = (int)(i29 + d14 * (i32 - i29) + d15 * (i35 - i29) + 0.5D);
/* 575 */                   i9 = (int)(i30 + d14 * (i33 - i30) + d15 * (i36 - i30) + 0.5D);
/*     */ 
/* 577 */                   if (i7 < 0) i7 = 0;
/* 578 */                   if (i8 < 0) i8 = 0;
/* 579 */                   if (i9 < 0) i9 = 0;
/* 580 */                   if (i7 > 255) i7 = 255;
/* 581 */                   if (i8 > 255) i8 = 255;
/* 582 */                   if (i9 > 255) i9 = 255;
/*     */ 
/* 584 */                   i16 = (i7 << 16 & 0xFF0000) + (i8 << 8 & 0xFF00) + (i9 & 0xFF);
/*     */                 }
/* 586 */                 else if (this.m_mode == 0)
/*     */                 {
/* 588 */                   i25 = this.db1.getElem(i2 + i3 * 517);
/*     */ 
/* 590 */                   if (i2 == 499)
/* 591 */                     i26 = this.db1.getElem(i + 1 + j * 517);
/*     */                   else {
/* 593 */                     i26 = this.db1.getElem(i2 + 1 + i3 * 517);
/*     */                   }
/* 595 */                   if (i3 == 331)
/* 596 */                     i27 = this.db1.getElem(i + j * 517 + 517);
/*     */                   else {
/* 598 */                     i27 = this.db1.getElem(i2 + i3 * 517 + 517);
/*     */                   }
/* 600 */                   i28 = (i25 & 0xFF0000) >> 16;
/* 601 */                   i29 = (i25 & 0xFF00) >> 8;
/* 602 */                   i30 = i25 & 0xFF;
/* 603 */                   i31 = (i26 & 0xFF0000) >> 16;
/* 604 */                   i32 = (i26 & 0xFF00) >> 8;
/* 605 */                   i33 = i26 & 0xFF;
/* 606 */                   i34 = (i27 & 0xFF0000) >> 16;
/* 607 */                   i35 = (i27 & 0xFF00) >> 8;
/* 608 */                   i36 = i27 & 0xFF;
/*     */ 
/* 610 */                   i7 = (int)(i28 + d14 * (i31 - i28) + d15 * (i34 - i28) + 0.5D);
/* 611 */                   i8 = (int)(i29 + d14 * (i32 - i29) + d15 * (i35 - i29) + 0.5D);
/* 612 */                   i9 = (int)(i30 + d14 * (i33 - i30) + d15 * (i36 - i30) + 0.5D);
/*     */ 
/* 614 */                   if (i7 < 0) i7 = 0;
/* 615 */                   if (i8 < 0) i8 = 0;
/* 616 */                   if (i9 < 0) i9 = 0;
/* 617 */                   if (i7 > 255) i7 = 255;
/* 618 */                   if (i8 > 255) i8 = 255;
/* 619 */                   if (i9 > 255) i9 = 255;
/*     */ 
/* 621 */                   i7 = (int)(this.sqr[(i4 * i7 >> 8)] * d3);
/* 622 */                   i8 = (int)(this.sqr[(i5 * i8 >> 8)] * d3);
/* 623 */                   i9 = (int)(this.sqr[(i6 * i9 >> 8)] * d3);
/* 624 */                   i16 = (i7 << 16 & 0xFF0000) + (i8 << 8 & 0xFF00) + (i9 & 0xFF);
/*     */                 }
/*     */                 else
/*     */                 {
/* 628 */                   i25 = this.db1.getElem(i2 + i3 * 517);
/*     */ 
/* 630 */                   if (i2 == 499)
/* 631 */                     i26 = this.db1.getElem(i + 1 + j * 517);
/*     */                   else {
/* 633 */                     i26 = this.db1.getElem(i2 + 1 + i3 * 517);
/*     */                   }
/* 635 */                   if (i3 == 331)
/* 636 */                     i27 = this.db1.getElem(i + j * 517 + 517);
/*     */                   else {
/* 638 */                     i27 = this.db1.getElem(i2 + i3 * 517 + 517);
/*     */                   }
/* 640 */                   i28 = (i25 & 0xFF0000) >> 16;
/* 641 */                   i29 = (i25 & 0xFF00) >> 8;
/* 642 */                   i30 = i25 & 0xFF;
/* 643 */                   i31 = (i26 & 0xFF0000) >> 16;
/* 644 */                   i32 = (i26 & 0xFF00) >> 8;
/* 645 */                   i33 = i26 & 0xFF;
/* 646 */                   i34 = (i27 & 0xFF0000) >> 16;
/* 647 */                   i35 = (i27 & 0xFF00) >> 8;
/* 648 */                   i36 = i27 & 0xFF;
/*     */ 
/* 650 */                   i7 = (int)(i28 + d14 * (i31 - i28) + d15 * (i34 - i28) + 0.5D);
/* 651 */                   i8 = (int)(i29 + d14 * (i32 - i29) + d15 * (i35 - i29) + 0.5D);
/* 652 */                   i9 = (int)(i30 + d14 * (i33 - i30) + d15 * (i36 - i30) + 0.5D);
/*     */ 
/* 654 */                   i7 = (int)(i7 * d3);
/* 655 */                   i8 = (int)(i8 * d3);
/* 656 */                   i9 = (int)(i9 * d3);
/*     */ 
/* 658 */                   if (i7 < 0) i7 = 0;
/* 659 */                   if (i8 < 0) i8 = 0;
/* 660 */                   if (i9 < 0) i9 = 0;
/* 661 */                   if (i7 > 255) i7 = 255;
/* 662 */                   if (i8 > 255) i8 = 255;
/* 663 */                   if (i9 > 255) i9 = 255;
/*     */ 
/* 665 */                   i16 = (i7 << 16 & 0xFF0000) + (i8 << 8 & 0xFF00) + (i9 & 0xFF);
/*     */                 }
/*     */ 
/*     */               }
/*     */ 
/*     */             }
/* 673 */             else if (p <= 56.0D)
/*     */             {
/* 676 */               int i21 = (int)(4.0D * p - p);
/* 677 */               int i22 = i21 + 1;
/* 678 */               d12 = 4.0D * p - i21;
/* 679 */               double d2 = this.au3[i21] + d12 * (this.au3[i22] - this.au3[i21]) + w;
/*     */ 
/* 684 */               d13 = d2 * this.cos + d7 * this.sin;
/* 685 */               d14 = -d2 * this.sin + d7 * this.cos;
/*     */ 
/* 687 */               double d1 = this.au2[i21] + d12 * (this.au2[i22] - this.au2[i21]) + w;
/*     */ 
/* 692 */               d15 = d1 * this.cos + d7 * this.sin;
/* 693 */               double d16 = -d1 * this.sin + d7 * this.cos;
/*     */ 
/* 695 */               d3 = this.ac[(int)(4.0D * p + 0.5D)];
/*     */               double d17;
/*     */               double d18;
/*     */               int i37;
/*     */               int i38;
/*     */               int i39;
/*     */               int i40;
/*     */               int i41;
/*     */               int i42;
/*     */               int k;
/*     */               int m;
/*     */               int i10;
/*     */               int i11;
/*     */               int i12;
/* 697 */               if ((-250.0D <= d13) && (d13 <= 250.0D) && (-167.0D <= d14) && (d14 <= 166.0D))
/*     */               {
/* 699 */                 int n = (int)(d13 + 250.0D);
/* 700 */                 int i1 = (int)(-d14 + 166.0D - 1.0D);
/*     */ 
/* 702 */                 d17 = d13 + 250.0D - n;
/* 703 */                 d18 = -d14 + 166.0D - 1.0D - i1;
/* 704 */                 if (this.m_mode == 2)
/*     */                 {
/* 707 */                   i31 = ((int)(220.0D * d3) << 16 & 0xFF0000) + ((int)(220.0D * d3) << 8 & 0xFF00) + ((int)(220.0D * d3) & 0xFF);
/*     */ 
/* 709 */                   if (n == 499) {
/* 710 */                     i32 = this.db1.getElem(i + 1 + j * 517);
/*     */                   }
/*     */                   else {
/* 713 */                     i32 = ((int)(220.0D * d3) << 16 & 0xFF0000) + ((int)(220.0D * d3) << 8 & 0xFF00) + ((int)(220.0D * d3) & 0xFF);
/*     */                   }
/* 715 */                   if (i1 == 331) {
/* 716 */                     i33 = this.db1.getElem(i + j * 517 + 517);
/*     */                   }
/*     */                   else {
/* 719 */                     i33 = ((int)(220.0D * d3) << 16 & 0xFF0000) + ((int)(220.0D * d3) << 8 & 0xFF00) + ((int)(220.0D * d3) & 0xFF);
/*     */                   }
/* 721 */                   i34 = (i31 & 0xFF0000) >> 16;
/* 722 */                   i35 = (i31 & 0xFF00) >> 8;
/* 723 */                   i36 = i31 & 0xFF;
/* 724 */                   i37 = (i32 & 0xFF0000) >> 16;
/* 725 */                   i38 = (i32 & 0xFF00) >> 8;
/* 726 */                   i39 = i32 & 0xFF;
/* 727 */                   i40 = (i33 & 0xFF0000) >> 16;
/* 728 */                   i41 = (i33 & 0xFF00) >> 8;
/* 729 */                   i42 = i33 & 0xFF;
/*     */ 
/* 731 */                   i13 = (int)(i34 + d17 * (i37 - i34) + d18 * (i40 - i34) + 0.5D);
/* 732 */                   i14 = (int)(i35 + d17 * (i38 - i35) + d18 * (i41 - i35) + 0.5D);
/* 733 */                   i15 = (int)(i36 + d17 * (i39 - i36) + d18 * (i42 - i36) + 0.5D);
/*     */ 
/* 735 */                   if (i13 < 0) i13 = 0;
/* 736 */                   if (i14 < 0) i14 = 0;
/* 737 */                   if (i15 < 0) i15 = 0;
/* 738 */                   if (i13 > 255) i13 = 255;
/* 739 */                   if (i14 > 255) i14 = 255;
/* 740 */                   if (i15 > 255) i15 = 255;
/*     */                 }
/* 742 */                 else if (this.m_mode == 0)
/*     */                 {
/* 745 */                   i31 = this.db1.getElem(n + i1 * 517);
/*     */ 
/* 747 */                   if (n == 499)
/* 748 */                     i32 = this.db1.getElem(i + 1 + j * 517);
/*     */                   else {
/* 750 */                     i32 = this.db1.getElem(n + 1 + i1 * 517);
/*     */                   }
/* 752 */                   if (i1 == 331)
/* 753 */                     i33 = this.db1.getElem(i + j * 517 + 517);
/*     */                   else {
/* 755 */                     i33 = this.db1.getElem(n + i1 * 517 + 517);
/*     */                   }
/* 757 */                   i34 = (i31 & 0xFF0000) >> 16;
/* 758 */                   i35 = (i31 & 0xFF00) >> 8;
/* 759 */                   i36 = i31 & 0xFF;
/* 760 */                   i37 = (i32 & 0xFF0000) >> 16;
/* 761 */                   i38 = (i32 & 0xFF00) >> 8;
/* 762 */                   i39 = i32 & 0xFF;
/* 763 */                   i40 = (i33 & 0xFF0000) >> 16;
/* 764 */                   i41 = (i33 & 0xFF00) >> 8;
/* 765 */                   i42 = i33 & 0xFF;
/*     */ 
/* 767 */                   i13 = (int)(i34 + d17 * (i37 - i34) + d18 * (i40 - i34) + 0.5D);
/* 768 */                   i14 = (int)(i35 + d17 * (i38 - i35) + d18 * (i41 - i35) + 0.5D);
/* 769 */                   i15 = (int)(i36 + d17 * (i39 - i36) + d18 * (i42 - i36) + 0.5D);
/*     */ 
/* 771 */                   if (i13 < 0) i13 = 0;
/* 772 */                   if (i14 < 0) i14 = 0;
/* 773 */                   if (i15 < 0) i15 = 0;
/* 774 */                   if (i13 > 255) i13 = 255;
/* 775 */                   if (i14 > 255) i14 = 255;
/* 776 */                   if (i15 > 255) i15 = 255;
/*     */ 
/* 779 */                   k = (int)(d15 + 250.0D);
/* 780 */                   m = (int)(-d16 + 166.0D - 1.0D);
/*     */ 
/* 782 */                   double d19 = d15 + 250.0D - k;
/* 783 */                   double d20 = -d16 + 166.0D - 1.0D - m;
/*     */ 
/* 785 */                   int i43 = this.db1.getElem(k + m * 517);
/*     */                   int i44;
/* 787 */                   if (k == 499)
/* 788 */                     i44 = this.db1.getElem(i + 1 + j * 517);
/*     */                   else
/* 790 */                     i44 = this.db1.getElem(k + 1 + m * 517);
/*     */                   int i45;
/* 792 */                   if (m == 331)
/* 793 */                     i45 = this.db1.getElem(i + j * 517 + 517);
/*     */                   else {
/* 795 */                     i45 = this.db1.getElem(k + m * 517 + 517);
/*     */                   }
/* 797 */                   int i46 = (i43 & 0xFF0000) >> 16;
/* 798 */                   int i47 = (i43 & 0xFF00) >> 8;
/* 799 */                   int i48 = i43 & 0xFF;
/* 800 */                   int i49 = (i44 & 0xFF0000) >> 16;
/* 801 */                   int i50 = (i44 & 0xFF00) >> 8;
/* 802 */                   int i51 = i44 & 0xFF;
/* 803 */                   int i52 = (i45 & 0xFF0000) >> 16;
/* 804 */                   int i53 = (i45 & 0xFF00) >> 8;
/* 805 */                   int i54 = i45 & 0xFF;
/*     */ 
/* 807 */                   i10 = (int)(i46 + d19 * (i49 - i46) + d20 * (i52 - i46) + 0.5D);
/* 808 */                   i11 = (int)(i47 + d19 * (i50 - i47) + d20 * (i53 - i47) + 0.5D);
/* 809 */                   i12 = (int)(i48 + d19 * (i51 - i48) + d20 * (i54 - i48) + 0.5D);
/*     */ 
/* 811 */                   if (i10 < 0) i10 = 0;
/* 812 */                   if (i11 < 0) i11 = 0;
/* 813 */                   if (i12 < 0) i12 = 0;
/* 814 */                   if (i10 > 255) i10 = 255;
/* 815 */                   if (i11 > 255) i11 = 255;
/* 816 */                   if (i12 > 255) i12 = 255;
/*     */ 
/* 818 */                   i13 = (int)(this.sqr[(i10 * i13 >> 8)] * d3);
/* 819 */                   i14 = (int)(this.sqr[(i11 * i14 >> 8)] * d3);
/* 820 */                   i15 = (int)(this.sqr[(i12 * i15 >> 8)] * d3);
/*     */                 }
/*     */                 else
/*     */                 {
/* 824 */                   i31 = this.db1.getElem(n + i1 * 517);
/*     */ 
/* 826 */                   if (n == 499)
/* 827 */                     i32 = this.db1.getElem(i + 1 + j * 517);
/*     */                   else {
/* 829 */                     i32 = this.db1.getElem(n + 1 + i1 * 517);
/*     */                   }
/* 831 */                   if (i1 == 331)
/* 832 */                     i33 = this.db1.getElem(i + j * 517 + 517);
/*     */                   else {
/* 834 */                     i33 = this.db1.getElem(n + i1 * 517 + 517);
/*     */                   }
/* 836 */                   i34 = (i31 & 0xFF0000) >> 16;
/* 837 */                   i35 = (i31 & 0xFF00) >> 8;
/* 838 */                   i36 = i31 & 0xFF;
/* 839 */                   i37 = (i32 & 0xFF0000) >> 16;
/* 840 */                   i38 = (i32 & 0xFF00) >> 8;
/* 841 */                   i39 = i32 & 0xFF;
/* 842 */                   i40 = (i33 & 0xFF0000) >> 16;
/* 843 */                   i41 = (i33 & 0xFF00) >> 8;
/* 844 */                   i42 = i33 & 0xFF;
/*     */ 
/* 846 */                   i13 = (int)(i34 + d17 * (i37 - i34) + d18 * (i40 - i34) + 0.5D);
/* 847 */                   i14 = (int)(i35 + d17 * (i38 - i35) + d18 * (i41 - i35) + 0.5D);
/* 848 */                   i15 = (int)(i36 + d17 * (i39 - i36) + d18 * (i42 - i36) + 0.5D);
/*     */ 
/* 850 */                   i13 = (int)(i13 * d3);
/* 851 */                   i14 = (int)(i14 * d3);
/* 852 */                   i15 = (int)(i15 * d3);
/*     */                 }
/*     */ 
/* 855 */                 double d4 = this.ac2[(int)(4.0D * p + 0.5D)];
/* 856 */                 int i13 = (int)(i13 + d4);
/* 857 */                 int i14 = (int)(i14 + d4);
/* 858 */                 int i15 = (int)(i15 + d4);
/* 859 */                 if (i13 > 255) i13 = 255;
/* 860 */                 if (i14 > 255) i14 = 255;
/* 861 */                 if (i15 > 255) i15 = 255;
/* 862 */                 i16 = (i13 << 16 & 0xFF0000) + (i14 << 8 & 0xFF00) + (i15 & 0xFF);
/*     */               }
/* 864 */               else if ((-250.0D <= d15) && (d15 < 250.0D) && (-167.0D <= d16) && (d16 < 166.0D))
/*     */               {
/* 866 */                 k = (int)(d15 + 250.0D);
/* 867 */                 m = (int)(-d16 + 166.0D - 1.0D);
/*     */ 
/* 869 */                 d17 = d15 + 250.0D - k;
/* 870 */                 d18 = -d16 + 166.0D - 1.0D - m;
/*     */ 
/* 872 */                 i31 = this.db1.getElem(k + m * 517);
/*     */ 
/* 874 */                 if (k == 499)
/* 875 */                   i32 = this.db1.getElem(i + 1 + j * 517);
/*     */                 else {
/* 877 */                   i32 = this.db1.getElem(k + 1 + m * 517);
/*     */                 }
/* 879 */                 if (m == 331)
/* 880 */                   i33 = this.db1.getElem(i + j * 517 + 517);
/*     */                 else {
/* 882 */                   i33 = this.db1.getElem(k + m * 517 + 517);
/*     */                 }
/* 884 */                 i34 = (i31 & 0xFF0000) >> 16;
/* 885 */                 i35 = (i31 & 0xFF00) >> 8;
/* 886 */                 i36 = i31 & 0xFF;
/* 887 */                 i37 = (i32 & 0xFF0000) >> 16;
/* 888 */                 i38 = (i32 & 0xFF00) >> 8;
/* 889 */                 i39 = i32 & 0xFF;
/* 890 */                 i40 = (i33 & 0xFF0000) >> 16;
/* 891 */                 i41 = (i33 & 0xFF00) >> 8;
/* 892 */                 i42 = i33 & 0xFF;
/*     */ 
/* 894 */                 i10 = (int)(i34 + d17 * (i37 - i34) + d18 * (i40 - i34) + 0.5D);
/* 895 */                 i11 = (int)(i35 + d17 * (i38 - i35) + d18 * (i41 - i35) + 0.5D);
/* 896 */                 i12 = (int)(i36 + d17 * (i39 - i36) + d18 * (i42 - i36) + 0.5D);
/*     */ 
/* 898 */                 if (i10 < 0) i10 = 0;
/* 899 */                 if (i11 < 0) i11 = 0;
/* 900 */                 if (i12 < 0) i12 = 0;
/* 901 */                 if (i10 > 255) i10 = 255;
/* 902 */                 if (i11 > 255) i11 = 255;
/* 903 */                 if (i12 > 255) i12 = 255;
/*     */ 
/* 905 */                 i4 = (int)(i10 * d3);
/* 906 */                 i5 = (int)(i11 * d3);
/* 907 */                 i6 = (int)(i12 * d3);
/* 908 */                 i16 = (i4 << 16 & 0xFF0000) + (i5 << 8 & 0xFF00) + (i6 & 0xFF);
/*     */               }
/*     */               else
/*     */               {
/* 914 */                 i16 = this.db2.getElem(i + j * 517);
/* 915 */                 i4 = (i16 & 0xFF0000) >> 16;
/* 916 */                 i5 = (i16 & 0xFF00) >> 8;
/* 917 */                 i6 = i16 & 0xFF;
/*     */ 
/* 919 */                 d5 = this.ac3[(int)(4.0D * p + 0.5D)];
/* 920 */                 i4 = (int)(i4 * d5);
/* 921 */                 i5 = (int)(i5 * d5);
/* 922 */                 i6 = (int)(i6 * d5);
/* 923 */                 i16 = (i4 << 16 & 0xFF0000) + (i5 << 8 & 0xFF00) + (i6 & 0xFF);
/*     */               }
/*     */ 
/*     */             }
/* 928 */             else if (p <= 59.5D)
/*     */             {
/* 930 */               i16 = this.db2.getElem(i + j * 517);
/* 931 */               i4 = (i16 & 0xFF0000) >> 16;
/* 932 */               i5 = (i16 & 0xFF00) >> 8;
/* 933 */               i6 = i16 & 0xFF;
/*     */ 
/* 935 */               d5 = this.ac3[(int)(4.0D * p + 0.5D)];
/* 936 */               i4 = (int)(i4 * d5);
/* 937 */               i5 = (int)(i5 * d5);
/* 938 */               i6 = (int)(i6 * d5);
/*     */ 
/* 940 */               i16 = (i4 << 16 & 0xFF0000) + (i5 << 8 & 0xFF00) + (i6 & 0xFF);
/*     */             } else {
/* 942 */               if (d6 > 59.5D + w + 2 * step)
/*     */                 break;
/* 944 */               i16 = this.db2.getElem(i + j * 517);
/*     */             }
/*     */ 
/*     */           }
/*     */ 
/*     */         }
/*     */ 
/* 951 */         this.db0.setElem(i + j * 517, i16);
/*     */       }
/*     */     }
/*     */   }
/*     */ }

/* Location:           /home/sakurai/src/pagecurl/java/old/
 * Qualified Name:     SimpleSlideShow500
 * JD-Core Version:    0.6.0
 */
